
;; Function main (main, funcdef_no=0, decl_uid=1942, cgraph_uid=1, symbol_order=0)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x_6 = x_1
x_6 = &NONLOCAL
x_1 = &NONLOCAL
x_1 = x_6

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x_6 = { NONLOCAL }
x_1 = { NONLOCAL } same as x_6
main = { }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to vars: { }

Flow-insensitive points-to information


int main ()
{
  char c;
  int x;

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  x_6 = x_1 + 1;

  <bb 4> :
  # x_1 = PHI <3(2), x_6(3)>
  if (x_1 <= 9)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return x_1;

}


