#+TITLE: CS2105 Computer Networking
* Review
** Tutorial 1 (Overview)
1. End-to-end delay = propagation + transmission (depends on data) + processing + queueing time
2. Segmentation of packets reduces unfairness in transporting (similar to scheduling fairness)
3. Network core = router and switches. The rest are edges
4. Application (message): HTTP, DNS, DHCP, RTP
   Transport (segment/datagram): TCP, UDP
   Network (packet): v4, v6
   Link (frame): Ethernet, 802.11 (WiFi), ARP
5. Switch: Physical, Link
   Router: (Switch) + network
** Tutorial 2 (HTTP, DNS)
1. Date in HTTP message indicates time of sending. Last modified date is in the =Last-Modified= field.
2. Quick conclusion: to get a packet in HTTP1.0, you need =2*RTT=. (3-way handshake with the request)
   piggyback in the 3rd, and response in 4th. If persistent, subsequent requests using the same
   connection is =1*RTT=
3. Web cache can act like both server and client
** Tutorial 3 (RDT)
1. RDT packets have sequence number to determine whether new packet or retransmission.
** Tutorial 4 (RDT, TCP)
1. (Delayed packets) design considerations to deal with duplicate packets
   due to routing delay:
   1. Ensure we do not reuse seq/ack numbers too soon to confuse packets
      from the previous round as valid. 32 bit for TCP
   2. TTL: too late then it means it is from long ago, 3 mins then discard if received.
   3. GBN: cumulative ack: acking n means can send n+1 onwards. 1 timer for sender. Receiver acks the last valid package (can be current)
   4. SR: individual ack: acking packet n with ackn. Sender keeps timer
      for every single sent and unacked packet.
   5. TCP: Receiver FAQ:
      1. (False) Will always ack in-order segment.
         A: Will only ack the next one (in or out order), to save ack
      2. (True) Will always ack out-order segment.
         A: True. Acks the next expected byte

      Sender FAQ:
      What could have happened if i received duplicated acks?
      Will always ignore unless it is the 4th ack of the same no,
      then resend what they wanted. or timer expires, resend the
      packet requested in ack
      1. I sent a packet twice due to first packet timeout.
      2. Receiver buffered an out of order segment.
** Header structures
1. TCP (20 bytes)
2. UDP (16 bytes for segment)
3. IP (20 bytes, 40 bytes for IPv6)
4. Ethernet Link (26 bytes)
* Tutorial 4
1. Yes, if we use the reliable transfer protocol as discussed.
   The latest version of RDT:
   Sender:
   1. Sends packets with numbering
   2. =PKT0= would expect =ACK0=
   3. Has a timer to account for packet lost: if time elapsed but no ack, resend
      the package
   4. Against packet corruption: if ack is corrupted, resend the package, since
      the corrupted ack could be "i received" or "i havent"

   Receiver:
   1. Passively receives. If receive a complete packet of =PKTn=, sends back
      =ACKn=.
   2. If =PKTn= is corrupted, =ACKn-1= to prompt sender to resend =PKTn=
2. (Wrong solution, one by one)
   Recall RDT3.0 only numbers packets (and acks) with 0 and 1.
   1.
      1. Sender sends =PKT0= then =PKT1=.
      2. Receiver gets both in order, and sends out =ACK0= then =ACK1=.
      3. (Jumble) Sender gets =ACK1=, realizes =PKT0= is not yet acked.
      4. Sender resends =PKT0=.
      5. Receiver gets =PKT0=, but thought it is the third package in order. Things
         are already messed up.
   2. Correction: (Use timeout)
      1. =PKT0= takes very long
      2. Timeout on client. =PKT0=
      3. =ACK0=
      4. =PKT1=
      5. =ACK1=
      6. Now the old =PKT0= arrives. mistaken
3. Add a timestamp, or greater numbering
   (Below is wrong answer)
   *Go-back N*:
   - Client: I have a window
     - if gets =ACK= *less than* my window, then ignore (cumulative ack)
     - else if it is *greater than* my window, move the window to one after the ack
   - Server: my latest ack is *N*.
     - if gets =PKT= *less than* N, then ignore and send =ACKN=
     - else if it is *greater than* N, still send =ACKN=

   *Selective repeat*:
   In selective repeat, Server always have a more updated window
   - Client: I have a window, a to b
     - if gets =ACK= *less than* a, then ignore (cumulative ack)
     - impossible to get ack more than b: I do not send packet outside of my
       window. or don't care
   - Server: I have a window a to b
     - if gets =PKT= *less than* a, ignore
     - else if it is *greater than* b, ignore
4. (8,9), (6,5)
   *Go-back N*:
   Discards packets
   Only relies on timer to resend. (Why cumulative ACK doesn't have any effect?)
   - =PKT0,1,2,3=
   - =ACK0=
   - =PKT4=
   - Since =PKT1= timeouts, =PKT1,2,3,4=
   - =ACK0= when =PKT4= received since =PKT1= is missing
   - =ACK1,2,3,4=
   *Selective repeat*:
   In selective repeat, Server always have a more updated window
   - Client: I have a window, a to b
     - if gets =ACK= *less than* a, then ignore (cumulative ack)
     - impossible to get ack more than b: I do not send packet outside of my
       window. or don't care
   - Server: I have a window a to b
     - if gets =PKT= *less than* a, ignore
     - else if it is *greater than* b, ignore
5. 92-65 = 27. 92
6. Max L = 2^32
   Size of of packet = (64 + 512)*8 bits
   no of packet = L/512 = 2^27
   Speed = 155 * 10^6 bps
** Recap
*** RDT1.0 - No loss/corrupt
Just send, no need feedback
*** RDT2.0 - No loss, but can corrupt
ACK/NAK to signal good/bad
*** RDT2.1 - No loss, but can corrupt
NAK-free by acking the last valid packet
*** RDT3.0 - Loss/corrupt
Using timer to gauge loss
Timer duration = slightly bigger than RTT
\[RTT_{n} = \alpha RTT_{actual} + (1 - \alpha) RTT_{n-1}\]
*** Go-Back N
Relies on 1 timer every pipeline. if the timer expire, pick up the latest ack
and send N
*** Selective repeat
*** TCP
**** Sequence number
is the byte number of the first byte in the file
**** Ack number
is the byte number receiver is expecting
* Tutorial 5
1. 11001010.00000011.00001110.00011001
2. xxxx is any binary string. thus first is x = 0 last is x = 1
   1. 1111xxxx
   2. 00001010.00101101.011xxxxx.
3. We look only at the last 8 bits
   1. 00|000000
   2. 01|000000
   3. 1|0000000
   So the only way is to =16.27.24.0/24=
4.
   1. 192.168.56.128
   2.
        | network prefix    |    binary Expression |
        |-------------------+----------------------|
        | 192.168.56.128/28 | 192.168.56.10-000000 |
        | 192.168.56.144/28 | 192.168.56.10-010000 |
        | 192.168.56.160/28 | 192.168.56.10-100000 |
        | 192.168.56.176/28 | 192.168.56.10-110000 |
5.
    | prefix match | interface | IP range | no of ip  |
    |--------------+-----------+----------+-----------|
    |           11 |         0 | 11xxxxxx | 2^6 = 64  |
    |          101 |         1 | 101xxxxx | 2^5 = 32  |
    |          100 |         2 | 100xxxxx | 2^5 = 32  |
    |    otherwise |         3 | 0xxxxxxx | 2^7 = 128 |
6. Assigned by router
    10.0.0.0 to 10.255.255.255
    172.16.0.0 to 172.31.255.255
    192.168.0.0 to 192.168.255.255
    LumiNUS uses public IP so it can be accessed outside NUS
    Laptop is assigned a private IP
* Week 9 Lecture
** IPv4
*** IPv4 Datagram Format
IP Header - 20 Bytes
| byte 0          | byte 1               | byte 2              | byte 3          |
|-----------------+----------------------+---------------------+-----------------|
| version         |                      | <IP Datagram Length | >               |
| <identifier     | >                    | flags               | fragment offset |
| TTL             | Upper Layer Protocol | <header checksum    | >               |
| <source IP      |                      |                     | >               |
| <destination IP |                      |                     | >               |
*** IP Fragmentation
Different links (ie routers) might have different MTU, so will chop up the
packets into smaller IP packets

For example: 20B IP header + 1200B IP datagram, with MTU 500B, will be chopped
into (1220/500 = 3) packets
| length | ID | flag | offset |
|--------+----+------+--------|
|   1200 | x  |    0 |      0 |
- First packet
  ID inherits from parent, but flag = 1 to indicate not the end.
  | length | ID | flag | offset |
  |--------+----+------+--------|
  |    500 | x  |    1 |      0 |
- Second packet
  Offset is in units of *8 Bytes*. Thus offset = 480 / 8 = 60. This is because
  offset header size is only 13bits
  | length | ID | flag | offset |
  |--------+----+------+--------|
  |    500 | x  |    1 |     60 |
- Third packet
  Flag of 0 represents last fragment.
  Length is 1200 - 480 * 2
  | length | ID | flag | offset |
  |--------+----+------+--------|
  |    240 | x  |    0 |    120 |
*** NAT: Network Address Translation
**** WAN vs LAN
- LAN: Subnet - everyone can talk to each other
- IP address received is not unique - is distributed (assigned by router)
- Router as a NAT, is the DHCP server
- Each datagram hits the router and will be sent out as the same IP address (the
  router's IP)
- Because there are limited no of IP address, in NUS, or home network, everyone
  gets a private IP address, not unique globally
**** Responsibilities
1. *Replace* source IP + port -> NAT IP + port (for every outgoing datagram)
2. *Remember* the mapping above
3. *Replace* NAT IP + port -> source private IP + port (for every incoming
   datagram) by the data stored above
**** Pros
- Save IP addresses that are running out
- Allow us to change addresses without disturbing the outside world
- Easy change of ISP - just change NAT's IP address
- Hackers cannot target a specific machine from the outside.
**** Cons
P2P applications will not work directly
** IPv6
*** Datagram Format
128 bits of source and dest IP address - 32 bytes
40 bytes of header
*** Challenges and Characteristics
- Not backwards compatible, hard to convert
- Tunelling
- Geolocation - determining location using IPv6 addresses
** Routing in the Internet
AS = autonomous systems
*** Intra-AS
- Protocols: RIP, OSPF
*** Inter-AS (not covered)
- de facto: BGP
*** Abstract view of Intra-AS
- Can view as a graph of routers
  - *Vertices*: Routers
  - *Edges*: Physical links between routers
- Weight of edge = cost of transmission
  IRL: much more complicated
*** Routing Algorithms Classification
**** "Link state" algorithms
- All routers have *complete knowledge* of network topology and link cost
- Dijkstra's SSSP
**** "Distance vector" algorithms
- Routers only know direct neighbors and costs to that neighbor
- Keep exchanging view with
- Algorithm:
  1. Data: Each host has a V*V table describing distance from one node to another, and is NOT NECESSARILY symmetric. This is because each host only knows time from itself to others for sure. For example, host 1 would not know the distance between hosts 2 and 3.
  2. Each host maintains such a table, and at every iteration modifies its table according to rows from other hosts by relaxing the edges. For example, d_1(3) = min{d_1(2)+d_2(3), d_1(3)+d_3(3)} where if it is subscript 1, the data is pulled from Host 1's knowledge, while subscript 2 is pulled from Host 2's knowledge, sent over in each iteration.
  3. At the end of calculating its own row (distance from myself to every other host), if it has changed, send it over to every host. Repeat until nothing received - convergence.
  4. Routing blackhole happens due to the decentralized nature: upon a change of edge weight, an update will be looped if Host 1 thinks 1,3's shortest route is 1-2-3, and upon sending to host 2, it things 2-1-3 is the shortest, and sending back to route 1.
  5. The above is rectified by /poisioned reverse/: if 1 goes to 3 by 1,2,3, then it tells 2 that its distance to 3, 1,3=infinity. This way 2 will never go back to 1 for 3, ie making 2,1,3 impossible.
**** Graph notations
Difference between:
- =c(x,y)= the direct cost from x to y. Infinity if not direct neighbors
- =d_x(y)= *min cost path* from x to y. Infinity if not connected
**** RIP - Routing Information Protocol
- cost = hop count
- insensitive to network congestions
- UDP port 520, every 30 seconds to exchange routingtable with neighbors
- If neighbors quiet for 3 mins, deem neighbor as failed
  - to prevent sending packets to a failed router
** ICMP - Internet Control Message Protocol
used by hosts and routers for
- error reporting (unable to reach)
- echo request/reply as in ping
- header after IP header
*** Header
Type + Code + Checksum + Others
*** What does it do?
- Ping (echoing requests), *Code = 0*
- Check if hosts are reachable (*Type*: 3)
- Reject packet if TTL expired or bad IP header
* Tutorial 6
1. Wide Area vs Local Area
   a. 192.168.1.1 (can we use 192.168.1.0?)
   b.
          | <NAT Translation Table |              > |
          |------------------------+----------------|
          |               WAN side |       LAN side |
          |------------------------+----------------|
          |     24.34.112.235:1024 | 192.168.1.1:80 |
          |     24.34.112.235:1025 | 192.168.1.2:80 |
          |     24.34.112.235:1026 | 192.168.1.3:80 |
2. 1500B, MTU 500B, original ID = 422
   Recall headers: type, length, id, flag, offset, checksum, source ip:port,
   dest ip:port
   a. 1480 / 480 = 4
   b. 500B
   c. Packet 1:
      | length |  id | flag | offset |
      |--------+-----+------+--------|
      |    500 | 422 |    1 |      0 |
    Packet 2: offset = 480/8 = 60
      | length |  id | flag | offset |
      |--------+-----+------+--------|
      |    500 | 422 |    1 |     60 |
    Packet 3:
      | length |  id | flag | offset |
      |--------+-----+------+--------|
      |    500 | 422 |    1 |    120 |
    Packet 4:  length = 60 + 20 = 80, actual file = 60B
      | length |  id | flag | offset |
      |--------+-----+------+--------|
      |     60 | 422 |    0 |    180 |
3.
     |        | cost to w | cost to x | cost to y | cost to z |
     |--------+-----------+-----------+-----------+-----------|
     | from x | 3         |         0 |         3 |     (y) 5 |
     | from y | (x) 6     |         3 |         0 |         2 |
     | from z | (y, x) 8  |     (y) 5 |         2 |         0 |
4. ICMP, ID
** Corrections
1. Router needs a private IP too. Usually .0 or .1
2. Given a N-byte datagram, actual data = =N - size(header)=
* Week 10 Lecture - Link Layer, Part 1
** Role of link layer
- Some protocols include 4G LTE, ethernet
- IP datagrams encapsulated in frames, ie adding Header and Trailer to a
  payload.
  | Header | Payload (might have cracks?) | Trailer |
- *Link access control*: the link coordinate different nodes that share the same
  link when they can send frames.
- *Reliable delivery*
- *Error detection*
- *Error correction*
- *NIC*, the network adapter runs in PCIE slot. Eg, Ethernet card/chipset,
  802.11 card
- Adapters are semi-autonomous, implementing both link and physical layers,
  usually hardward
** Parity and CRC schemes
- Better error-correcting schemes trade off time or space for better correction
  rate.
- Why checksum in TCP/UDP/IP? Because it is faster to implement
- CRC (Cyclic Redundancy Check) is expensive in software but fast in hardware
*** Parity Checking
**** Single bit parity
Given =d= data bits, add =1= bit such that the total number of set bits is even
or odd.
*Error detection*: when a bit flips, the total parity is no longer odd/even
**** 2D bit parity
Treat the bitstream as a matrix. Implement Single bit parity for every row and
column.
|   |   |   |   |   | (Even) Parity |
|---+---+---+---+---+---------------|
| 1 | 0 | 1 | 0 | 1 |             1 |
| 1 | 1 | 1 | 1 | 0 |             0 |
| 0 | 1 | 1 | 1 | 0 |             1 |
|---+---+---+---+---+---------------|
| 0 | 0 | 1 | 0 | 1 |             0 |
_Proof:_ that the diagonal parity is well-defined. Assume we have m*n bits, and
there are =odd= number of set bits. Then across the rows (and also columns), we
must have *odd number of odd parities*. If we use the odd parity scheme, both
the parity row and column must have odd parity, and then the diagonal entry must
be =0=.
# incomplete
*** Cyclic Redundancy Check (CRC)
- Similar to quotient theorem. If we have binary data =D=, a agreed beforehand
  generator =G= of =r+1= bits, and if we do a division =D/G=, we will get a
  remainder, CRC =R= of =r= bits. (D = kG + R)
- Sender sends (D,R). Receiver gets G, divides (D,R) by G. *Expected*: if no
  corruption, no remainder found by receiver
** Different methods for accessing shared medium
*** Type 1: point-to-point link
- Example protocols: PPP, Serial Line Internet Protocol
- One host <--> one router
- or Star topology: Many hosts <-directly connected-> one router
*** Type 2: broadcast link
ie. WIFI, Satellite, Ethernet with bus topology
- Collision happens, similar to many people talking in a room, and need a
  solution to separate
*** Multiple Access Protocol
**** Channel Partitioning
***** Time Division Multiple Access (TDMA)
Similar to RR scheduling - each node is allocated a time slice within a bit
"time quantum". However if a node does not use its slot during the allocated
time, it is wasted.
***** Frequency division multiple access (FDMA)
- Channel spectrum is divided into frequency bands (4-8kHz, 8-12kHz,...)
- Every node is assigned a fixed freq band, and use it exclusively.
- ie. Radio Channel signals
**** "Taking Turns" Protocols
***** Polling (ie Bluetooth)
A "master" node (compare scheduler) "invites" slave nodes (compare processes) to
transmit in turn.
Problems:
- polling overhead
- single point of failure in master node
  to replace with another slave node
***** Token passing
Everyone sit in a group (nodes arranged in a ring), and a mic is passed around
for people to speak (for nodes to transmit to the router)
Problems:
- token overhead
- single point of failure (ie token)
  token is lost if the node fails
***** Random Access Protocols
A node can transmit at anytime. True chaos! Collisions can happen
We need to decide how to
- Detect Collisions
- How to recover?
****** Slotted ALOHA
Assumptions:
- Each frame (of data) are of the same size
- Time divided into units, to transmit one frame
- Nodes transmit only at the beginning of a slot

Operation: listen to the channel for collision. If collision, restransmit with a
probability of =p= until success. =p= is variable to respond to traffic. Max
throughput usually only around =1/e=, 37%
****** Pure (Unslotted) ALOHA
Can send at any time, no synchronization (feedback)
****** Carrier Sense Multiple Access (CSMA)
Sense the channel before transmission. If busy, defer, else transmit
Collisions: Async access to sense the channel. Think race condition, but due to
propagation delay.
****** CSMA/CD (Collision Detection)
By Bob Metcalfe, inspired by ALOHANet. Underlying method of the early Ethernet.
Characteristics:
- Abort transmission (to reduce channel wastage)
- Retransmit after a random amount of time.

Minimum Frame Size
Two people shout at the same time, standing far apart. If the sound is too
short, although they shouted at the same time, by the time the other sound
reaches them, they have stopped shouting. (And they thought there's no collision)

We now use star-topology to a switch, and switches are cheap. Last time ethernet
was multiple access.
****** 802.11 CSMA/CA (Collision Avoidance)
In wireless connections, it might be impossible to sense the other nodes, but
still can connect to one another via a medium = router

Uses *CSMA/CA*. Uses acks and naks.
* Tutorial 7
1. Can the IP layer mess it up?
   Reordering might be still needed since might take different IP routes. TCP
   can handle reordering.
   Reliability: At the networking layer, if the buffer is full then packets (IP)
   can be dropped
   Queuing delay can jump up exponentially
2. G = =1001=
   Here is a little code snippet that does the division
   #+BEGIN_SRC python :session t7q2
import operator

def xor(bs1, bs2)->str:
    return str(operator.xor(int(bs1), int(bs2)))

def crc(d, g):
    len_d = len(d)
    r = len(g)
    # append r-1 zeroes
    rem = d + '0'*(r-1)
    while len(rem) >= r:
        # take the first r digits
        window = rem[:r]
        # bitwise xor with g
        xor_res = "".join([xor(window[i], g[i]) for i in range(r)])
        # replace the first r digits of d with result
        rem = str(int(xor_res)) + rem[r:]
        print("{: >20}".format(rem))
        # remove preceeding zeroes from d
    return '0'*(max(0,r-1-len(rem))) + rem
   #+END_SRC
   #+RESULTS:
   : None
   a. D = =11000111010=
      #+BEGIN_SRC python :session t7q2 :results output
crc("11000111010", "1001")
      #+END_SRC

      #+RESULTS:
      : 1010111010000
      :          11111010000
      :           1101010000
      :            100010000
      :               110000
      :                10100
      :                  110
      : '110'
   b.
           #+BEGIN_SRC python :session t7q2 :results output
     crc("01101010101", "1001")
           #+END_SRC

           #+RESULTS:
           : 11111010101000
           :        1101010101000
           :         100010101000
           :            110101000
           :             10001000
           :                11000
           :                 1010
           :                   11
           : '011'
   c.
           #+BEGIN_SRC python :session t7q2 :results output
     crc("11111010101","1001")
           #+END_SRC

           #+RESULTS:
           : 1101010101000
           :         100010101000
           :            110101000
           :             10001000
           :                11000
           :                 1010
           :                   11
           : '011'
   d.
          #+BEGIN_SRC python :session t7q2 :results output
    crc("1000110001","1001")
          #+END_SRC

          #+RESULTS:
          : 1110001000
          :            111001000
          :             11101000
          :              1111000
          :               110000
          :                10100
          :                  110
          : '110'
3.
   a. (1,1) flipped. Actually any one bit flip, as the column and row parity
      will always be able to pinpoint a coordinate
   b. (1,1) and (3,1) for example. Parities in conflict are rows 1 and 3, but
      not sure what is wrong, since (1,3) and (3,3) flipping would cause the
      same error.
   c. combine both in b.
4. Time division is good since everyone will likely use their own share
   (guaranteeing high throughput). Frequency division is good too.

   Carrier sensing is not that good because of propagation delay, it is likely
   to go into a live lock.

   Token passing is fine but have to deal with the failure of token.
5.
   a. 244. 245 B would know that A is sending alr.
   b. A will know B is sending at (244+245=489). But the minimal time A has to
      send for = (framesize=64*8=512) so it will know.
* Week 11 Lecture - Link Layer, Part 2
** Switched LAN
*** Link Layer Addressing and ARP
- Every adapter (NIC) has a 48-bit MAC address.
- Link layer sends from MAC to MAC. It is the "IP address" of the link layer.
- MAC is given by IEEE to vendors. This info is burned into ROM in NIC,
  sometimes can reset via software
-
       | ip address            | mac address       |
       |-----------------------+-------------------|
       | 32 bits               | 48 bits           |
       | transport datagrams   | transports frames |
       | dynamic, but prefixed | static            |
       | Postal code           | NRIC number       |
- *Question*: how to know MAC address given IP address?
  *Answer*: ARP protocol
- Each IP node (hosts, routers) has an ARP table that stores the mappings:
  <IP address: MAC address: TTL>
- TTL also seen in IP headers and DNS
- Case study: in the same subnet, A wants to talk to B
  - If A knows B's MAC address, just broadcast a frame with B's MAC address.
    Receivers that are not B will discard the frame.
  - If A does not know B's MAC address, it will broadcast an *ARP query packet*
    MAC address is =FF-FF-FF-FF-FF-FF=
    - B replies to A its MAC address
    - A stores the IP-MAC conversion in its ARP table until TTL expires
- Case study: What else?
  - *Question*: How to know whether A and B are in the same subnet:
    *Answer*: check the subnet mask, for example =255.255.0.0= and use it to
    mask both IP addresses and see if the masked address is the same.
  - What if A and B are on different subnets?
    - First try: in the datagram sent
      Network (IP): source IP(A), dest IP(B)
      Link (frame): source MAC(A), dest MAC(B)
      *DOES NOT WORK*, because router will discard this frame due to different
      MAC address.
    - Second try:
      Network (IP): source IP(A), dest IP(B)
      Link (frame): source MAC(A), dest MAC(*router's inward facing MAC*)
      Router routes:
      Network (IP): source IP(A), dest IP(B)
      Link (frame): source MAC(*router's outward facing MAC*), dest MAC(B)
*** Ethernet
- Difference between LAN and subnet?
  LAN: different subnet tech, such as token ring and 802.11, or ethernet 802.3
- Ethernet standard comprises of the link and physical layer:
  - Link: MAC protocol and frame format
  - Physical: either twisted pair copper (shorter range of max 100m), or fibre
    optic of single mode or multi mode, speed > 10Gbps
  - Physical Topology: Bus (with collision) or Star. (Star is more prevalent
    because of the switches are cheaper)
- Ethernet Frame (Link layer): (in bytes)
  | Preamble (8) | Dest Addr (6) | Src Addr (6) | Type (2) | Payload (46-1500) | CRC (4) |
  - Preamble = =b'10101010'\*7+b'10101011=.
    This is to create a square wave (from alternating 0s and 1s), for the receiver
    to synchronize the width of a bit and the clockrate
  - Dest and Source Addr are MAC addresses. For discarding
  - Type: higher layer protocol, usually IP
  - CRC: checksum
- Ethernet CSMA/CD Algorithm
  1. NIC receives datagram from network, creates frame
  2. If NIC senses channel is idle, transmit.
     Else, wait until idle and transmit.
  3. If transmits without detecting another transmission, done!
     Otherwise, aborts and send jam signal, and goes to below:
  4. Binary backoff: after mth collision, wait for k*512 bit time, where
     k=(0,1,2,...,(2^m)-1. Wait (exponentially) increasingly longer time after
     every collision
- It is *Connection less* (no handshake) and *Unreliable* (drop without further
  action)
- Ethernet's MAP: CSMA/CD with binary (exponential) backoff
*** Link-layer Switches
**** Ethernet switch
- No IP address, job: store and forward ethernet frames after examining MAC address
- Has MAC address!! (probably)
- Transparent to hosts, hosts are unaware of its presence
- With star topology, each host has full duplex connection to each other via the
  switch, and there is NO COLLISIONS
- Self-learning, or "Broadcast and save"
  - Gets packet from A: record down the interface-MAC-TTL info in a table
    (interface as in which physical "port")
  - If know the MAC of the dest B, send, otherwise broadcast (ARP) and find out
    MAC of B. Save it in the table
* Tutorial 8
1. After the nth collision, choose number between 0 and 2^n-1.
   P(delay=4*512bit time) = 1/32
   bit time = 10^-7 second
2. *Learning point*: an interface might have more than one mac address.
          | event        | switch table after event | link(s) a frame is forwarded to    |
          |--------------+--------------------------+------------------------------------|
          | B sends to D | (B, B.MAC)               | A,C,D (broadcast to find MAC of D) |
          | D replies B  | (B, B.MAC), (D, D.MAC)   | Sends it back to B                 |
          | D sends to A | (B, B.MAC), (D, D.MAC)   | A,B,C                              |

          Explanation: frame of B contains the MAC of src (B) and MAC of dest. But the
          switch does not know which interface is the dest at. So the ethernet switch
          forwards the packet to every interface except those known not to have the
          same MAC as dest (ie. B) and the wrong recipients will drop the frame.

          In the last case, forwards frame to every unknown interface.
3.
   a.
      1. A will create an IP datagram with B's IP as destination.

      2. Link will check MAC address from ARP and include B's MAC as
         destination.
      3. Sends it out of the link (broadcasts, but in this case due to star
         topology, it hits switch only). Hits the switch S
      4. Switch has updated table, thus forwards to B's interface
      5. B gets the frame, MAC address correct, hence unpack to get IP datagram
   b.
      1. A will create an IP datagram with B's IP as destination.
      2. At the link layer, it does not know B's MAC address. Hence broadcasts a
         ARP query packet with destination MAC as =FF*6=, and dest IP as B's IP.
      3. Hits switch S. S will broadcast it to every interface.
      4. The rest will see the dest IP, not for me, then drop, except for B. B
         will reply A with proper MAC address.
      5. A caches B's IP-MAC-TTL tuple in its ARP table, and sends IP datagram
         as part (a) above
   c.
      1. A does not know (everyone, including) B's IP address. Well, A must know
         where to send it to, either an IP address or name. if name, resolve via
         DNS.

      2. Once A know's B's IP address, it can determine whether they are in the
         same subnet by subnet mask. A will know B is in the same subnet, but to
         find out B's MAC, it has to broadcast an ARP query packet , with
         destination IP as B, and dest MAC as FF.

      3. Reaches switch. Switch records A's interface-MAC, and broadcast this
         frame to all unknown interfaces.

      4. B receives this ARP query packet, reply with its MAC and IP address.

      5. B's frame hits S, records B's MAC. Send it back to A.

      6. Now A sends to B the IP datagram as per part (a).

   d.
      1. A uses subnet mask to determine that the dest is not in the same
         subnet. It will put dest IP as B, but dest MAC as router (as checked up
         in ARP table. Otherwise, how to know router's MAC?)
         - My guess: A will broadcast ARP query packet, but router not
           only should respond to its internal IP, but also any IP that is not
           within the subnet.

      2. A sends packet: dest IP: dest, dest MAC: router. Hits switch, gets
         forwarded to router

      3. Router replaces source IP with it's public IP (and port), and source
         mac with it's public mac. Saves the publicIPPort-internalSrcIP in the
         routing table. Replace dest mac with the other router's mac.
* Week 12 Lecture
** Multimedia: audio
- Analog audio signal sampled at constant rate
  - The sound is a continuous wave (analog)
  - measure its value at various samples: eg 44,100 samples/sec
  - Sufficient sampling rate >= 2*maximum hearing frequency
- Samples recorded as integers, ie 8-bit = 256 values etc, CDs are 2^16
  - Instead of real numbers, there is a loss in accuracy
- Example rates:
  - CD: 44.1k * 2 (mono and stereo) * 16 bits
- MP3 compression: remove higher frequencies (take lower sampling rate for eg)
** Multimedia: video
- We can save the videos as 30 frames * each pixel, but is very huge
- We use the spatial and temporal redundancy (locality)
  - run-length coding
  - spatial redundancy: within an image, a large part will have same color.
  - temporal redundancy: from one frame to next
- Motion compensated difference
  Compare moved frame i with frame i+1 to reduce the "difference"
*** Compression
- Constant bit rate: (CBR)
- Variable bit rate: (VBR)
  - Difference in frame differences
    eg. credits scene (low diff) vs sports events (high diff)
**** Examples
- MPEG1 (CD-ROM) 1.5Mbps
- MPEG2 (DVD) 3-6Mbps
- MPEG4/H.264 (<1Mbps, used in internet, good quality)
** Multimedia networking types
1. Streamed, stored audio, video
   - can transmit in advance
2. Conversational (video/voice over IP)
   - low delay tolerance
3. Streaming live (one-way live)
   - eg. live sporting event, higher delay tolerance
*** Streaming stored video
- Continuous playout constraint: once client plays, you must continuous play the
  video, ie the timing must match
- Client-side buffer
  - The dilemma between fast startup and proper buffering
- RTP protocol (using UDP)
  - server sends packets to client based on their encoding rate
  - playout delay of 2-5 seconds
  - UDP may be blocked by firewalls
  - push-based streaming
- HTTP GET
  - pull-based streaming
  - fill rate (of buffer) fluctuates due to TCP congestion control
  - smooth TCP delivery rate
*** VoIP
- keep delay below 150ms as ideal, >400ms as bad
- talk spurts vs silent periods
  - packets generated only during talk spurt
  - 64kbps
  - Sends segment into socket every 20ms during talkspurt
- Losses
  - network loss (IP datagram lost etc)
  - delay loss (too late to play, discard)
  - tolerance: 1% to 10%
- Fixed playout delay
  - we can "decide" the delay of recorded time and playing time (for the
    receiving party), =q=
  - choosing =q=: small =q= for better experience, but large =q= for less
    packets discarded (due to delay loss)
- Adaptive playout delay
  - goal: low playout delay (ie small q), low loss rate (ie big q)
  - adaptively estimate the q: by moving average
- Recovery from packet loss
  - Forward Error Correction
    - For the ith packet, piggyback a low-quality packet of (i-1)th. When the
      (i-1)th is lost, use the low quality version from the next packet
  - Interleave packets
    - So that lost packets will not create a full second of loss; rather, a few
      milliseconds over a few seconds.
** Real-Time Protocol
- RFC 3550
- Interoperability - different VoIP apps can work together
- UDP
- WebRTC - Real time communications, with JS APIs in browsers
- SIP - Session Initiation Protocol
  voice and video call over internet, identified by emails rather than phone
  numbers
*** RTP Suite
- RTP, RTCP (Control), RTSP (Streaming)
- RTCP transfers status information (like metadata)
- RTSP (play, pause, fast forward etc)
- RTP Header
  - payload type (7bits) - the codec, eg H.261, MPEG2 etc
  - sequence number (16 bits)
  - timestamp (32 bits)
  - Synchronization Source ID: different streams, eg different zoom
    participant's stream
- Problems: difficult to cache data
- Advantage: short end-to-end latency
** HTTP Streaming
- Increasingly used by Video-on-Demand
- Instead of GETting a large video, uses *Dynamic Adaptive Streaming over HTTP*
- Divide videos into small segments
- DASH Advantages:
  - easy implementation of server (regular web server, no state unlike RTP,
    scalable)
- Disadvantages:
  Each streamlet is 2-10 seconds long, it cannot provide for low latency two-way
  applications
- Each streamlet has a few versions, of low, medium and high quality
- The bandwidth decides which streamlet to get. *adaptive bitrate algorithm*
** Summary
- Video on Demand: use DASH
- Live streaming: DASH (latency as low as 1-2 seconds)
- VoIP, teleconferencing: RTC (WebRTP)
* Tutorial 9
1. Spatial and temporal redundancy.
   Spatial: within an image many pixels might have similar/same values
   Temporal: in more static scenes, the difference between frames is very low.
   Save the difference
2. To save 1024 values, we need 10 bits. therefore 160000 bits per second,
   around 160kbps
3. Application buffer is the one we see on the screen. When need new streamlets,
   will get from TCP, which might dispense from buffer.
4. To maintain a consistent stream, not out of place media bits.
5. Different RTP streams with the same sessions is differentiated by the ssid.
   I am sure they have different headers, and are sent across different ports.
6. We can tolerate video loss, but not video packet without metadata.
7.
    | packet number | time generated | time received |
    |---------------+----------------+---------------|
    |             1 |              1 |             8 |
    |             2 |              2 |             9 |
    |               |                |            12 |
    |               |                |            12 |
    |               |                |            12 |
    |               |                |            15 |
    |               |                |            15 |
    |               |                |            16 |

   a. as above
   b. except for 1, 2, 5th packets, the rest are not in time.
   c. 5 and 7 only
   d. 11-1 = 10
8.
   a. 25%, 0% extra bandwidth
   a. Second scheme. First scheme's redundant chunk might not even be useful
* Past Year Papers
** 1819 Sem 2
:LOGBOOK:
CLOCK: [2020-04-16 Thu 16:43]--[2020-04-16 Thu 17:28] =>  0:45
:END:
*** Question 2
a.
   1. 2
   2. 800
   3.
         | upon receiving at time | ack |
         |------------------------+-----|
         |                    100 | 200 |
         |                    300 | 300 |
         |                    600 | 400 |
         |                    800 | 400 |
         |                    900 | 600 |
         |                   1100 | 600 |
         |                   1200 | 800 |
b. Host A:8, Host B:7
c.
   1. False. If there is a lost ACK, the packet will be transmitted twice.
   2. True, this can prevent receiver getting duplicate packets.
   3. True, to acknowledge a NAK-free corrupted packet.
*** Question 3
a. RTT is very long, therefore takes very long for a packet to pass.
a. CRC is easy to implement in hardware, but expensive to implement in software.
   Conversely, checksums are easier to implement in software.
a. Pure ALOHA is prone to network collisions, while CSMA tries to avoid that by
   sensing the channel first before transmitting. CSMA-CD aborts transmission
   when collision is detected, reducing channel wastage.
*** Question 4
1.
   1. 3
   2. 10?
   3. ARP saves MAC to IP pairs. Except switches, therefore 10
2. 172.16.24.208/29
3. 100, 1001, 10010, 100100
4.
   1. 1500-20-18-8
   2. 3439
** 1819 Sem 1
*** Q9
a.
   | node | dist   |
   |------+--------|
   | b    | 2      |
   | c    | \infty |
   | d    | 6      |
   | 3    | \infty |
